{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Qas\\\\Desktop\\\\Front End Developer Tutorial\\\\6 - React\\\\EXTRA - Class Based Component\\\\src\\\\components\\\\Users.js\";\nimport { Component } from \"react\";\nimport User from \"./User\";\nimport classes from \"./Users.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Users extends Component {\n  constructor() {\n    super(); // Must call this within the state constructor\n\n    this.state = {\n      showUsers: true // This is how we use State in class based components, state is ALWAYS an object.\n\n    };\n  } //Providing an error to catch using ErrorBoundary component\n\n\n  componentDidUpdate() {\n    if (this.props.users.length === 0) {\n      throw new Error(\"No users provided!\");\n    }\n  }\n\n  toggleUsersHandler() {\n    this.setState(curState => {\n      return {\n        showUsers: !curState.showUsers\n      };\n    }); // Setting state to the opposite of what it was\n  }\n\n  render() {\n    const usersList = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: this.props.users.map(user => /*#__PURE__*/_jsxDEV(User, {\n        name: user.name\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.users,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.toggleUsersHandler.bind(this),\n        children: [this.state.showUsers ? \"Hide\" : \"Show\", \" Users\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), this.state.showUsers && usersList]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Users;","map":{"version":3,"sources":["C:/Users/Qas/Desktop/Front End Developer Tutorial/6 - React/EXTRA - Class Based Component/src/components/Users.js"],"names":["Component","User","classes","Users","constructor","state","showUsers","componentDidUpdate","props","users","length","Error","toggleUsersHandler","setState","curState","render","usersList","map","user","name","id","bind"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,OAAP,MAAoB,oBAApB;;;AAEA,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAC5BI,EAAAA,WAAW,GAAG;AACZ,YADY,CACH;;AACT,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,IADA,CACM;;AADN,KAAb;AAGD,GAN2B,CAQ5B;;;AACAC,EAAAA,kBAAkB,GAAG;AACnB,QAAI,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,YAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;AACF;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKC,QAAL,CAAeC,QAAD,IAAc;AAC1B,aAAO;AAAER,QAAAA,SAAS,EAAE,CAACQ,QAAQ,CAACR;AAAvB,OAAP;AACD,KAFD,EADmB,CAGf;AACL;;AAEDS,EAAAA,MAAM,GAAG;AACP,UAAMC,SAAS,gBACb;AAAA,gBACG,KAAKR,KAAL,CAAWC,KAAX,CAAiBQ,GAAjB,CAAsBC,IAAD,iBACpB,QAAC,IAAD;AAAoB,QAAA,IAAI,EAAEA,IAAI,CAACC;AAA/B,SAAWD,IAAI,CAACE,EAAhB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;;AAQA,wBACE;AAAK,MAAA,SAAS,EAAElB,OAAO,CAACO,KAAxB;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE,KAAKG,kBAAL,CAAwBS,IAAxB,CAA6B,IAA7B,CAAjB;AAAA,mBACG,KAAKhB,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC,MADnC;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAIG,KAAKD,KAAL,CAAWC,SAAX,IAAwBU,SAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AAtC2B;;AAyC9B,eAAeb,KAAf","sourcesContent":["import { Component } from \"react\";\n\nimport User from \"./User\";\nimport classes from \"./Users.module.css\";\n\nclass Users extends Component {\n  constructor() {\n    super(); // Must call this within the state constructor\n    this.state = {\n      showUsers: true, // This is how we use State in class based components, state is ALWAYS an object.\n    };\n  }\n\n  //Providing an error to catch using ErrorBoundary component\n  componentDidUpdate() {\n    if (this.props.users.length === 0) {\n      throw new Error(\"No users provided!\");\n    }\n  }\n\n  toggleUsersHandler() {\n    this.setState((curState) => {\n      return { showUsers: !curState.showUsers };\n    }); // Setting state to the opposite of what it was\n  }\n\n  render() {\n    const usersList = (\n      <ul>\n        {this.props.users.map((user) => (\n          <User key={user.id} name={user.name} />\n        ))}\n      </ul>\n    );\n\n    return (\n      <div className={classes.users}>\n        <button onClick={this.toggleUsersHandler.bind(this)}>\n          {this.state.showUsers ? \"Hide\" : \"Show\"} Users\n        </button>\n        {this.state.showUsers && usersList}\n      </div>\n    );\n  }\n}\n\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}